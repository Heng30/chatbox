export struct ChatItem {
    utext: string,
    btext: string,
    etext: string,

    uuid: string,
    is-mark: bool,
}

export struct ChatSession {
    uuid: string,
    is-mark: bool,
    name: string,
    system-prompt: string,
    api-model: string,
    use-history: bool,

    chat-items: [ChatItem]
}

export struct MessageItem {
    text: string,
    text-type: string,
}

export struct SessionDialogSetting {
    is-show: bool,
    handle-type: string,
    api-model: [string],
}

export struct SessionConfig {
    name: string,
    system-prompt: string,
    api-model: string,
    use-history: bool,
}

export struct OkCancelDialogSetting {
    title-type: string,
    title-text: string,
    body-text: string,

    handle-type: string,
    handle-uuid: string,
}

export struct SystemPrompts {
    names: [string],
    prompts: [string],
}

export struct SettingUI {
    font-size: string,
}

export struct SettingProxy {
    enabled: bool,
    url: string,
    port: string,
}

export struct SettingChatOpenAIChat {
    url: string,
    model: string,
    max-tokens: string,
    temperature: float,
    frequency-penalty: float,
    presence-penalty: float,
}

export struct SettingChatOpenAI {
    api-key: string,
    chat: SettingChatOpenAIChat,
}

export struct SettingChat {
    openai: SettingChatOpenAI,
}

export struct SettingDialogConfig {
    show: bool,
    ui: SettingUI,
    proxy: SettingProxy,
    chat: SettingChat,
}

export struct AboutDialog {
    show: bool,
    icon: image,
    title: string,
    text: string,
    sponsor: string,
}

export global Store  {
    in-out property<bool> is-tab-pressed: false;

    in-out property<[ChatItem]> session-datas: [
        /* { utext: "show me some rust code.", btext: "int main() {return 0;}", etext:"", uuid: "1", is-mark: false}, */
        /* { utext: "This is not rust code.",  btext: "function main(){}", etext:"", uuid: "2", is-mark: true}, */
    ];

    in-out property<SystemPrompts> system-prompts: {
        names: ["选择预定义提示", "通用聊天机器人"],
        prompts: ["", "你是一个通用聊天机器人。"]
    };

    in-out property<[ChatSession]> chat-sessions: [
        { name: "默认会话", uuid: "default-session-uuid", is-mark: true , system-prompt: system-prompts.prompts[1], use_history: true, api-model: session-dialog-setting.api-model[0]},
        /* { name: "会话-1", uuid: "session-uuid-1", is-mark: false , system-prompt: system-prompts.prompts[1], use_history: false, api-model: session-dialog-setting.api-model[0]}, */
    ];
    in-out property<string> current-session-uuid: chat-sessions[0].uuid;

    in-out property<MessageItem> message;

    in-out property<SessionDialogSetting> session-dialog-setting: {
        is-show: false,
        handle-type: "",
        api-model: ["ChatGPT(chat-3.5-turbo)"],
    };

    in-out property<OkCancelDialogSetting> ok-cancel-dialog-setting: {
        title-type: "",
        title-text: "",
        body-text: "",
        handle-type: "",
        handle-uuid: "",
    };

    in-out property<SettingDialogConfig> setting-dialog-config: {
        show: false,
        ui: {
            font-size: "18",
        },
    };

    in-out property<AboutDialog> about-dialog: {
        show: false,
        title: "ChatBox v1.0.0",
        text: "Based on Slint-UI. Copyright 2022-2030 The Heng30 Company Ltd. All rights reserved. The program is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.",
        sponsor: "0xf1199999751b1a3A74590adBf95401D19AB30014",
        icon: @image-url("./images/bot.svg"),
    };

    in-out property<{show: bool}> help-dialog: {
        show: false,
    };
}

