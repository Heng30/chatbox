import { Theme } from "../../theme.slint";
import { Store } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { Btn } from "../../base/btn.slint";
import { TabBtn } from "../../base/tab-btn.slint";
import { UI } from "./ui.slint";
import { Chat } from "./chat/chat.slint";
import { Proxy } from "./proxy.slint";

export component SettingDialog inherits Rectangle {
    in-out property<length> body-width: 680px;
    in-out property<length> body-height: 450px;
    in-out property<color> title-bg: Theme.brand-color;

    property<string> current-checked-item: "ui";

    visible: Store.setting-dialog-config.show;
    width: self.visible ? root.body-width : 0;
    height: self.visible ? root.body-height : 0;
    background: Theme.base-background-color;


    VerticalLayout {
        Rectangle {
            height: txt.preferred-height * 1.33;
            background: root.title-bg;
            txt := Text {
                text: "设置";
                color: Colors.white;
                font-size: Theme.default-font-size + 1px;
            }
        }

        Rectangle {
            height: 100%;
            background: Theme.dialog-background;

            VerticalLayout {
                spacing: Theme.spacing * 2;
                padding: Theme.padding * 2;

                HorizontalLayout {
                    alignment: space-around;
                    height: Theme.default-font-size + Theme.padding * 2;

                    TabBtn {
                        text: "界面";
                        icon: @image-url("../../images/setting-fill.svg");
                        checked: current-checked-item == "ui";
                        clicked => {
                            current-checked-item = "ui";
                        }
                    }

                    TabBtn {
                        text: "会话";
                        icon: @image-url("../../images/chat.svg");
                        checked: current-checked-item == "chat";
                        clicked => {
                            current-checked-item = "chat";
                        }
                    }

                    TabBtn {
                        text: "代理";
                        icon: @image-url("../../images/proxy.svg");
                        checked: current-checked-item == "proxy";
                        clicked => {
                            current-checked-item = "proxy";
                        }
                    }

                }

                HorizontalLayout {
                    alignment: center;
                    Rectangle {
                        width: 100%;
                        height: 2px;
                        background: Theme.brand-color;
                    }
                }

                Rectangle {
                    ui-tab := UI {
                        visible: current-checked-item == "ui";
                        font-size: Theme.default-font-size / 1px;
                    }

                    chat-tab := Chat {
                        visible: current-checked-item == "chat";

                        openai-api-key: Store.setting-dialog-config.chat.openai.api-key;
                        openai-url: Store.setting-dialog-config.chat.openai.chat.url;
                        openai-max-tokens: Math.max(Store.setting-dialog-config.chat.openai.chat.max-tokens.to-float(), 128);
                        openai-temperature: Math.max(Store.setting-dialog-config.chat.openai.chat.temperature, 0);
                        openai-frequency-penalty: Math.max(Store.setting-dialog-config.chat.openai.chat.frequency-penalty, -200);
                        openai-presence-penalty: Math.max(Store.setting-dialog-config.chat.openai.chat.presence-penalty, -200);
                    }

                    proxy-tab := Proxy {
                        visible: current-checked-item == "proxy";
                        proxy-enabled: Store.setting-dialog-config.proxy.enabled;
                        proxy-url: Store.setting-dialog-config.proxy.url;
                        proxy-port: Store.setting-dialog-config.proxy.port;
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: Theme.spacing;
            Btn {
                text: "取消";
                bg-color: Theme.danger-color;
                icon: @image-url("../../images/cancel.svg");
                clicked => {
                    Logic.setting-cancel();

                    ui-tab.font-size = Theme.default-font-size / 1px;
                    proxy-tab.proxy-enabled = Store.setting-dialog-config.proxy.enabled;
                    proxy-tab.proxy-url = Store.setting-dialog-config.proxy.url;
                    proxy-tab.proxy-port = Store.setting-dialog-config.proxy.port;

                    chat-tab.openai-api-key = Store.setting-dialog-config.chat.openai.api-key;
                    chat-tab.openai-model = Store.setting-dialog-config.chat.openai.chat.model;
                    chat-tab.openai-url = Store.setting-dialog-config.chat.openai.chat.url;
                    chat-tab.openai-max-tokens = Math.max(Store.setting-dialog-config.chat.openai.chat.max-tokens.to-float(), 128);
                    chat-tab.openai-temperature = Math.max(Store.setting-dialog-config.chat.openai.chat.temperature, 0);
                    chat-tab.openai-frequency-penalty = Math.max(Store.setting-dialog-config.chat.openai.chat.frequency-penalty, -200);
                    chat-tab.openai-presence-penalty = Math.max(Store.setting-dialog-config.chat.openai.chat.presence-penalty, -200 );

                    Store.setting-dialog-config.show = false;
                }
            }

            Btn {
                text: "确定";
                icon: @image-url("../../images/success.svg");
                clicked => {
                    Logic.setting-ok({
                        ui: {
                            font-size: ui-tab.font-size
                        },
                        proxy: {
                            enabled: proxy-tab.proxy-enabled,
                            url: proxy-tab.proxy-url,
                            port: proxy-tab.proxy-port
                        },
                        chat: {
                            openai: {
                                api-key: chat-tab.openai-api-key,
                                chat:  {
                                    url: chat-tab.openai-url,
                                    model: chat-tab.openai-model,
                                    max-tokens: chat-tab.openai-max-tokens,
                                    temperature: chat-tab.openai-temperature,
                                    frequency-penalty: chat-tab.openai-frequency-penalty,
                                    presence-penalty: chat-tab.openai-presence-penalty
                                }
                            }
                        }
                    });

                    Store.setting-dialog-config.show = false;
                }
            }
        }
    }
}
