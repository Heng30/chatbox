import { ListView, LineEdit } from "std-widgets.slint";
import { Theme } from "../theme.slint";
import { Store } from "../store.slint";
import { Logic } from "../logic.slint";
import { IconBtn } from "../base/icon-btn.slint";

export component ArchivePanel inherits Rectangle {
    in-out property search-text <=> search-lineedit.text;

    private property<length> item-height: 45px;
    forward-focus: search-lineedit;

    width: Theme.body-right-panel-width;
    background: Theme.dark-fill-color;

    animate width {
        duration: Theme.default-animate-duration;
        easing: ease-in-out;
    }

    public function scroll-to-top() {
        flick.viewport-y = 0;
    }

    VerticalLayout {
        FocusScope {
            property <bool> is-ctrl-pressed;
            key-pressed(event) => {
                if (event.text == Key.Control) {
                    is-ctrl-pressed = true;
                }

                if (is-ctrl-pressed) {
                    if (event.text == "o" || event.text == "d") {
                        if (Store.session-archive-datas.length == 1) {
                            if (event.text == "o") {
                                Logic.show-session-archive(Store.current-session-uuid, Store.session-archive-datas[0].uuid);
                            } else if (event.text == "d") {
                                Logic.delete-session-archive(Store.current-session-uuid, Store.session-archive-datas[0].uuid);
                                search-lineedit.text = "";
                                search-lineedit.edited("");

                            }
                        }
                        accept
                    } else {
                        reject
                    }
                } else {
                    reject
                }
            }
            key-released(event) => {
                if (event.text == Key.Control) {
                    is-ctrl-pressed = false;
                }

                reject
            }

            HorizontalLayout {
                search-lineedit := LineEdit {
                    placeholder-text: Store.translator.archive-search-placeholder-text;
                    accepted => {
                        search-btn.clicked();
                    }

                    edited => {
                        if (root.search-text == "") {
                            search-btn.clicked();
                        } else {
                            Logic.archive-list-reactive(root.search-text);
                        }
                    }
                }

                search-btn := IconBtn {
                    height: Theme.header-height;
                    width: Theme.bottom-btn-height * 1.33;
                    border-radius: 0;
                    bg-color: Theme.info-color;
                    hover-color: Theme.info-color.darker(20%);
                    icon-width: Theme.icon-size;
                    icon: @image-url("../images/search.svg");
                    clicked => {
                        Logic.show-session-archive-list(Store.current-session-uuid, root.search-text);
                    }
                }
            }
        }

        flick := Flickable {
            viewport-height: Store.session-archive-datas.length * root.item-height;
            for data[index] in Store.session-archive-datas : Rectangle {
                y: index * item-height;
                height: root.item-height;
                background: touch.has-hover ? Theme.label-hover-color : Colors.transparent;

                touch := TouchArea {
                    clicked => {
                        Logic.show-session-archive(Store.current-session-uuid, data.uuid);
                    }
                }

                HorizontalLayout {
                    padding-left: Theme.padding * 2;
                    padding-right: Theme.padding * 2;
                    alignment: space-between;

                    Text {
                        width: root.width - icon.width - Theme.padding * 6;
                        color: Theme.regular-text-color;
                        text: data.name;
                        overflow: elide;
                        vertical-alignment: center;
                    }

                    VerticalLayout {
                        alignment: center;
                        icon := IconBtn {
                            tip-pos: "left";
                            tip-text: Store.translator.tip-delete;
                            icon: @image-url("../images/delete.svg");
                            colorize: Theme.regular-text-color;
                            clicked => {
                                Store.ok-cancel-dialog-setting.title-type = "warning";
                                Store.ok-cancel-dialog-setting.title-text = Store.translator.warning;
                                Store.ok-cancel-dialog-setting.body-text = Store.translator.delete-or-not;
                                Store.ok-cancel-dialog-setting.handle-type = "session-archive-item";
                                Store.ok-cancel-dialog-setting.handle-uuid = data.uuid;
                            }
                        }
                    }
                }
            }
        }
    }
}
