import { Button, TextEdit } from "std-widgets.slint";
import { Theme } from "../theme.slint";
import { Store } from "../store.slint";
import { Logic } from "../logic.slint";
import { IconBtn } from "../base/icon-btn.slint";
import { Btn } from "../base/btn.slint";

export component Footer inherits Rectangle {
    height: Math.min(Math.max(te.preferred-height + vbox.padding * 2 + root.btn-height, Theme.question-box-height), Theme.question-box-height *  4);
    in-out property<length> btn-height: Theme.bottom-btn-height;
    in-out property question <=> te.text;

    property <bool> is-ctrl-pressed;
    property <bool> is-recording: Store.is-audio-recording;

    callback scroll-to-top();
    callback scroll-to-bottom();
    callback scroll-up();
    callback scroll-down();

    public function force-focus() {
        te.focus();
    }

    FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = true;
            }

            if (is-ctrl-pressed) {
                if (event.text == Key.Return) {
                    Logic.send-input-text(root.question);
                    root.question = "";
                } else if (event.text == "[") {
                    root.scroll-to-top();
                } else if (event.text == "]") {
                    root.scroll-to-bottom();
                } else if (event.text == "k") {
                    root.scroll-up();
                } else if (event.text == "j") {
                    root.scroll-down();
                } else if (event.text == "r") {
                    if (Store.is-audio-recording) {
                        Logic.stop-audio-record();
                    } else {
                        Logic.start-audio-record();
                    }
                } else if (event.text == "p") {
                    Logic.play-audio-record();
                } else if (event.text == "t") {
                    Logic.voice-to-text();
                } else if (event.text == "h") {
                    Logic.reset-current-session();
                } else if (event.text == "m") {
                    Logic.retry-send-input-text();
                } else if (event.text == "l") {
                    Logic.remove-current-chats-last();
                }
            }

            reject
        }
        key-released(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = false;
            }

            reject
        }

        vbox := VerticalLayout {
            padding: Theme.padding * 2;

            function scroll-to-bottom() {
                if (flick.viewport-height <= flick.height) {
                    return;
                }

                flick.viewport-y = -flick.viewport-height + flick.height;
            }

            Rectangle {
                background: Theme.light-fill-color.darker(10%);
                border-radius: Theme.border-radius;

                flick := Flickable {
                    x: 0px;
                    y: 0px;
                    viewport-height: te.preferred-height;
                    height: root.height - root.btn-height;

                    te := TextInput {
                        x: 1px;
                        y: Theme.padding;
                        single-line: false;
                        wrap: word-wrap;

                        edited => {
                            vbox.scroll-to-bottom();
                        }
                    }
                }

                Text {
                    x: 1px;
                    y: Theme.padding;
                    visible: te.text == "";
                    text: "Ctrl+Enter";
                    color: Theme.placeholder-text-color;
                }
            }
        }
    }

    Rectangle {
        x: vbox.padding;
        y: root.height - root.btn-height - Theme.padding * 2;
        height: root.btn-height;
        width: root.width - vbox.padding * 2;

        IconBtn {
            x: parent.width - (self.width + Theme.padding * 2) * 1;
            icon: @image-url("../images/send.svg");
            clicked => {
                if (te.text == "") { return; }

                Logic.send-input-text(te.text);
                te.text = "";
            }
        }

        IconBtn {
            x: parent.width - (self.width + Theme.padding * 2) * 2;
            icon: !root.is-recording ? @image-url("../images/recording.svg") : @image-url("../images/stop.svg");
            clicked => {
                if (root.is-recording) {
                    Logic.stop-audio-record();
                } else {
                    Logic.start-audio-record();
                }
            }
        }

        IconBtn {
            x: parent.width - (self.width + Theme.padding * 2) * 3;
            icon: @image-url("../images/format-clear.svg");
            clicked => {
                te.text = "";
            }
        }

        IconBtn {
            x: parent.width - (self.width + Theme.padding * 2) * 4;
            icon: @image-url("../images/stop.svg");
            clicked => {
                Logic.stop-generate-text(Store.current-session-uuid);
            }
        }

        IconBtn {
            x: parent.width - (self.width + Theme.padding * 2) * 5;
            icon: @image-url("../images/reset.svg");
            clicked => {
                Store.ok-cancel-dialog-setting.title-type = "warning";
                Store.ok-cancel-dialog-setting.title-text = Store.translator.warning;
                Store.ok-cancel-dialog-setting.body-text = Store.translator.reset-or-not;
                Store.ok-cancel-dialog-setting.handle-type = "session-reset";
                Store.ok-cancel-dialog-setting.handle-uuid = "";
            }
        }
    }
}

