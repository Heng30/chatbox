import { Button, TextEdit } from "std-widgets.slint";
import { Theme } from "../theme.slint";
import { Store } from "../store.slint";
import { Logic } from "../logic.slint";
import { Btn } from "../base/btn.slint";
import { IconBtn } from "../base/icon-btn.slint";

export component Footer inherits VerticalLayout {
    spacing: Theme.spacing;
    height: Theme.bottom-panel-height;
    in-out property<length> btn-height: 40px;
    in-out property question <=> te.text;

    property <bool> is-ctrl-pressed;
    property <bool> is-return-pressed;

    public function force-focus() {
        te.has-focus = true;
    }

    FocusScope {
        VerticalLayout {
            width: 100%;
            alignment: start;

            Rectangle {
                height: root.height - btn-height - Theme.spacing;
                te := TextEdit {
                    edited(text) => { }
                }

                Text {
                    x: 0;
                    y: 0;
                    visible: te.text == "";
                    text: "Ctrl+Enter";
                    color: Theme.placeholder-text-color;
                }

                IconBtn {
                    x: parent.width - self.width - Theme.padding * 6;
                    y: Theme.padding * 2;
                    icon: root.height == Theme.bottom-panel-height ? @image-url("../images/arrow-up.svg") : @image-url("../images/arrow-down.svg");
                    clicked => {
                        if (root.height == Theme.bottom-panel-height) {
                            root.height = Theme.bottom-panel-height * 4;
                        } else {
                            root.height = Theme.bottom-panel-height;
                        }
                    }
                }
            }
        }

        key-pressed(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = true;
            } else if (event.text == Key.Return) {
                is-return-pressed = true;
                if (is-ctrl-pressed && is-return-pressed) {
                    Logic.send-input-text(root.question);
                    root.question = "";
                }
            } else if (event.text == "u") {
                if (is-ctrl-pressed && root.height == Theme.bottom-panel-height) {
                    root.height = Theme.bottom-panel-height * 4;
                }
            } else if (event.text == "d") {
                if (is-ctrl-pressed && root.height == Theme.bottom-panel-height * 4) {
                    root.height = Theme.bottom-panel-height;
                }
            }
            reject
        }
        key-released(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = false;
            }
            if (event.text == Key.Return) {
                is-return-pressed = false;
            }

            reject
        }
    }

    HorizontalLayout {
        spacing: Theme.spacing * 2;

        HorizontalLayout {
            spacing: Theme.spacing;

            Btn {
                bg-color: Theme.danger-color;
                icon: @image-url("../images/reset.svg");
                width: 30%;
                height: root.btn-height;
                text: Store.translator.reset;
                clicked => {
                    Logic.reset-current-session();
                }
            }

            Btn {
                height: root.btn-height;
                bg-color: Theme.warning-color;
                icon: @image-url("../images/stop.svg");
                text: Store.translator.stop;
                clicked => {
                    Logic.stop-generate-text();
                }
            }
        }

        HorizontalLayout {
            spacing: Theme.spacing;

            Btn {
                height: root.btn-height;
                bg-color: Theme.danger-color;
                icon: @image-url("../images/format-clear.svg");
                width: 30%;

                text: Store.translator.clear;
                clicked => {
                    te.text = "";
                }
            }

            Btn {
                height: root.btn-height;
                icon: @image-url("../images/send.svg");
                text: Store.translator.send;
                clicked => {
                    if (te.text == "") { return; }

                    Logic.send-input-text(te.text);
                    te.text = "";
                }
            }
        }
    }
}
