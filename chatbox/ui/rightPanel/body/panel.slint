import { ListView } from "std-widgets.slint";
import { Theme } from "../../theme.slint";
import { Store } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { UItem } from "./uitem.slint";
import { BItem } from "./bitem.slint";

export component Body inherits Rectangle {
    in-out property viewport-y <=> lv.viewport-y;

    function new-chat-text(utext: string, btext: string) -> string {
        return utext + "\n\n" + btext;
    }

    public function scroll-to-top() {
        lv.viewport-y = 0;
    }

    public function scroll-to-bottom() {
        if (lv.viewport-height <= lv.visible-height) {
            return;
        }

        lv.viewport-y = -lv.viewport-height + lv.visible-height;
    }

    public function scroll-up() {
        if (lv.viewport-y + lv.visible-height/4 >= 0) {
            lv.viewport-y = 0;
        } else {
            lv.viewport-y = lv.viewport-y + lv.visible-height/4;
        }
    }

    public function scroll-down() {
        if (lv.viewport-height <= lv.visible-height ||
                lv.viewport-y <= -lv.viewport-height + lv.visible-height) {
            return;
        }

        if (lv.viewport-y - lv.visible-height/4 <= -lv.viewport-height) {
            lv.viewport-y = -lv.viewport-height + lv.visible-height;
        } else {
            lv.viewport-y = lv.viewport-y - lv.visible-height/4;
        }
    }

    public function jump-to-viewport-y(vy: length) {
        if (vy < -lv.viewport-height + lv.visible-height) {
            lv.viewport-height = -vy + lv.visible-height;
        }

        lv.viewport-y = vy;
    }

    public function is-chats-on-bottom() -> bool {
        lv.viewport-y <= -lv.viewport-height + lv.visible-height;
    }

    lv := ListView {
        for data in Store.session-datas : VerticalLayout {
            padding-bottom: Theme.padding * 2;
            UItem {
                text: data.utext;
                uuid: data.uuid;
                timestamp: data.timestamp;
            }

            BItem {
                text: data.btext;
                uuid: data.uuid;
                items: data.btext-items;
            }
        }
    }
}
