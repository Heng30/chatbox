import { Theme } from "../../theme.slint";
import { Store } from "../../store.slint";
import { IconBtn } from "../../base/icon-btn.slint";
import { Logic } from "../../logic.slint";
import { CodeText } from "./code-text.slint";

export component BItem inherits VerticalLayout{
    in-out property text <=> txt.org-text;
    in-out property items <=> txt.items;
    in-out property<string> uuid;

    padding-left: Theme.padding * 2;
    spacing: Theme.spacing;

    HorizontalLayout {
        padding-bottom: Theme.padding;
        alignment: space-between;

        HorizontalLayout {
            padding-left: Theme.padding;
            spacing: Theme.spacing * 2;

            VerticalLayout {
                alignment: center;
                IconBtn {
                    icon: @image-url("../../images/copy.svg");
                    tip-text: Store.translator.tip-copy;
                    clicked => {
                        Logic.copy-to-clipboard(root.text);
                    }
                }
            }

            VerticalLayout {
                alignment: center;
                IconBtn {
                    icon: @image-url("../../images/speaker.svg");
                    tip-text: Store.translator.tip-play;
                    clicked => {
                        Logic.text-to-speech(root.uuid + "-bot", root.text);
                    }
                }
            }
        }

        Rectangle {
            height: img.width + 10px;
            width: img.width + 10px;
            border-radius: self.height / 2;
            background: Theme.basic-black-color;
            img := Image {
                width: Theme.icon-size;
                height: Theme.icon-size;
                image-fit: ImageFit.contain;
                source: @image-url("../../images/bot.svg");
                colorize: Colors.steelblue;
            }
        }
    }

    Rectangle {
        background: Theme.light-fill-color;
        border-radius: Theme.border-radius;

        VerticalLayout{
            padding: Theme.padding * 2;
            txt := CodeText { }
        }
    }
}

