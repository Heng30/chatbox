import { CDialog } from "../../base/cdialog.slint";
import { Theme } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Store, CodeTextItem } from "../../store.slint";
import { IconBtn } from "../../base/icon-btn.slint";
import { CenterLayout } from "../../base/center-layout.slint";

component TextItem inherits TextInput {
    wrap: word-wrap;
    color: Theme.primary-text-color;
    font-size: Theme.body-font-size;
    single-line: false;
    read-only: true;
}

export component CodeText inherits Rectangle {
    preferred-width: vbox.preferred-width;
    preferred-height: vbox.preferred-height;
    in-out property<string> org-text;
    in-out property<[CodeTextItem]> items: [];

    vbox := VerticalLayout {
        for item in items : HorizontalLayout {
            if item.text-type == "plain" : Rectangle {
                height: txt-plain.preferred-height;
                txt-plain := TextItem {
                    width: parent.width;
                    text: item.text;
                }
            }

            if item.text-type == "list-item": HorizontalLayout {
                padding-top: Theme.padding;
                padding-bottom: Theme.padding;

                txt-list-item := TextItem {
                    text: item.text;
                }
            }

            if item.text-type == "title-1": HorizontalLayout {
                padding-top: Theme.padding;
                padding-bottom: Theme.padding;

                TextItem {
                    text: item.text;
                    font-weight: 1.3;
                    font-size: Theme.title1-font-size;
                }
            }

            if item.text-type == "title-2": HorizontalLayout {
                padding-top: Theme.padding;
                padding-bottom: Theme.padding;

                TextItem {
                    text: item.text;
                    font-weight: 1.2;
                    font-size: Theme.title2-font-size;
                }
            }

            if item.text-type == "title-3": HorizontalLayout {
                padding-top: Theme.padding;
                padding-bottom: Theme.padding;

                TextItem {
                    text: item.text;
                    font-weight: 1.1;
                    font-size: Theme.title3-font-size;
                }
            }

            if item.text-type == "code" : VerticalLayout {
                padding: Theme.padding * 2;

                Rectangle {
                    background: Theme.dark-fill-color;
                    height: txt-code.preferred-height + Theme.padding * 4;
                    border-radius: Theme.border-radius;

                    txt-code := TextItem {
                        x: Theme.padding * 2;
                        y: Theme.padding * 2;
                        width: parent.width - self.x;
                        text: item.text;
                        font-size: Theme.code-font-size;
                        font-family: Theme.code-font-family;
                    }

                    img := IconBtn {
                        x: parent.width - self.width - Theme.padding;
                        y: Theme.padding;
                        icon: @image-url("../../images/copy.svg");
                        hover-color: Theme.hover-color-dark;
                        tip-text: Store.translator.tip-copy;
                        clicked => {
                            Logic.copy_to_clipboard(item.text);
                        }
                    }
                }
            }

            if item.text-type == "image": VerticalLayout {
                HorizontalLayout {
                    alignment: center;
                    Image {
                        max-width: Theme.max-image-width;
                        source: item.img;
                    }
                }
            }
        }
    }
}
