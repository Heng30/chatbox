import { Button, ListView, ComboBox , VerticalBox, TextEdit, HorizontalBox} from "std-widgets.slint";

import { Theme } from "./theme.slint";
import { Logic } from "./logic.slint";
import { Store } from "./store.slint";
import { Util } from "./util.slint";
import { Translator } from "./translator.slint";
import { ChatItem, ChatSession, Store } from "./store.slint";
import { LPanel } from "./leftPanel/panel.slint";
import { RPanel } from "./rightPanel/panel.slint";
import { Message } from "./base/message.slint";
import { SessionDialog } from "./dialog/session/dialog.slint";
import { SettingDialog } from "./dialog/setting/dialog.slint";
import { AboutDialog } from "./dialog/about.slint";
import { HelpDialog } from "./dialog/help.slint";
import { OkCancelDialog } from "./dialog/ok-cancel.slint";
import { IconBtn } from "./base/icon-btn.slint";
import { NewArchiveDialog } from "./dialog/new-archive.slint";

export component AppWindow inherits Window {
    default-font-size: Theme.default-font-size;
    preferred-width: Theme.default-width;
    preferred-height: Theme.default-height;
    background: Theme.base-background-color;
    no-frame: true;
    title: "chatbox";

    in-out property session-name <=> session-dialog.name;
    in-out property session-system-prompt <=> session-dialog.system-prompt;
    in-out property session-api-model <=> session-dialog.api-model;
    in-out property session-use-history <=> session-dialog.use-history;
    in-out property question <=> rpanel.question;
    in-out property chats-viewport-y <=> rpanel.chats-viewport-y;

    in-out property<bool> is-chats-auto-scroll-down: false;

    public function is-chats-on-bottom() -> bool {
        return rpanel.is-chats-on-bottom();
    }

    public function chats-scroll-to-bottom() {
        rpanel.scroll-to-bottom();
    }

    init => {
        rpanel.force-question-input-focus();
    }

    FocusScope {
        property <bool> is-ctrl-pressed;
        key-pressed(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = true;
            } else if (event.text == "i") {
                rpanel.force-question-input-focus();
            } else if (event.text == "o") {
                root.is-chats-auto-scroll-down = !root.is-chats-auto-scroll-down;
                if (root.is-chats-auto-scroll-down) {
                    Logic.show-message(Store.translator.session-chat-enabled-auto-scroll-down, "success");
                } else {
                    Logic.show-message(Store.translator.session-chat-disabled-auto-scroll-down, "success");
                }
            }
            reject
        }

        key-released(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = false;
            }
            reject
        }

        Rectangle {
            height: root.height;
            HorizontalLayout {
                padding: Theme.padding;
                spacing: Theme.spacing;
                LPanel {}
                rpanel := RPanel {
                    show-archive-panel => {
                        Store.show-archive-dialog = true;
                        arch-dialog.focus();
                    }
                }
            }
        }
    }

    Rectangle {
        x: parent.width - self.width - Theme.body-right-panel-width;
        y: Theme.padding * 2;
        height: Theme.icon-size;
        width: hbox.preferred-width;

        hbox := HorizontalLayout {
            alignment: end;
            padding-right: Theme.padding * 7;
            spacing: Theme.spacing * 2;

            IconBtn {
                icon: @image-url("./images/save.svg");
                clicked => {
                    Logic.save-session-chats(Store.current-session-uuid);
                }
            }

            IconBtn {
                icon: @image-url("./images/copy.svg");
                clicked => {
                    Logic.copy-session-chats(Store.current-session-uuid);
                    Logic.show-message(Store.translator.session-chat-copy-success, "success");
                }
            }

            IconBtn {
                icon: @image-url("./images/file-archive.svg");
                clicked => {
                    Store.show-archive-dialog = true;
                    arch-dialog.focus();
                }
            }

            IconBtn {
                icon: @image-url("./images/arrow-down.svg");
                clicked => {
                    rpanel.scroll-to-bottom();
                }
            }

            IconBtn {
                icon: @image-url("./images/arrow-up.svg");
                clicked => {
                    rpanel.scroll-to-top();
                }
            }

            IconBtn {
                icon: Theme.body-right-panel-width > 0 ?
                          @image-url("./images/arrow-right.svg")
                          : @image-url("./images/arrow-left.svg");

                clicked => {
                    Theme.toggle-archive-panel();
                }
            }
        }
    }

    Rectangle {
        if session-dialog.visible || setting-dialog.visible || oc-dialog.visible || about-dialog.visible || help-dialog.visible || arch-dialog.visible : Rectangle {
            width: 100%;
            height: 100%;
            opacity: 0.3;
            background: Theme.basic-black-color;

            TouchArea {}
        }

        session-dialog := SessionDialog { }
        setting-dialog := SettingDialog { }
        about-dialog := AboutDialog { }
        help-dialog := HelpDialog { }
        arch-dialog := NewArchiveDialog {
            close => {
                rpanel.force-question-input-focus();
            }
        }

        oc-dialog := OkCancelDialog { }
    }

    msg := Message {
        x: root.width / 2 - self.width / 2;
        y: 50px;
        text: Store.message.text;
        type: Store.message.text-type;
        clicked => {
            Logic.copy-to-clipboard(self.text);
        }
    }
}

export { Util, Logic, ChatItem, ChatSession, Store, Translator }
